// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(BulucumMVCContext))]
    [Migration("20221203111845_CreatedTables")]
    partial class CreatedTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Concreate.BrandVehicleType", b =>
                {
                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BrandId", "VehicleTypeId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("BrandVehicleType");

                    b.HasData(
                        new
                        {
                            BrandId = new Guid("8ecbbdb3-50ad-4b66-9baa-1f27298695a7"),
                            VehicleTypeId = new Guid("23cf33d2-4f95-4a36-973a-b0f6e69ce29d")
                        },
                        new
                        {
                            BrandId = new Guid("8ecbbdb3-50ad-4b66-9baa-1f27298695a7"),
                            VehicleTypeId = new Guid("974dbdb9-2993-44ef-b57a-1240eb1fb597")
                        },
                        new
                        {
                            BrandId = new Guid("8efb1d22-30fc-4180-bf39-26ffb23a2428"),
                            VehicleTypeId = new Guid("d20902d0-022c-4918-8c53-53e267ec4885")
                        },
                        new
                        {
                            BrandId = new Guid("71bd378a-854f-41a0-b565-2021bdaf1bfb"),
                            VehicleTypeId = new Guid("d20902d0-022c-4918-8c53-53e267ec4885")
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ecbbdb3-50ad-4b66-9baa-1f27298695a7"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 204, DateTimeKind.Local).AddTicks(8568),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 204, DateTimeKind.Local).AddTicks(8576),
                            Name = "BMW"
                        },
                        new
                        {
                            Id = new Guid("8efb1d22-30fc-4180-bf39-26ffb23a2428"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 204, DateTimeKind.Local).AddTicks(8595),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 204, DateTimeKind.Local).AddTicks(8596),
                            Name = "Mercedes"
                        },
                        new
                        {
                            Id = new Guid("8a5e1005-0744-45d9-8dad-e02f2110a27d"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 204, DateTimeKind.Local).AddTicks(8598),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 204, DateTimeKind.Local).AddTicks(8598),
                            Name = "Audi"
                        },
                        new
                        {
                            Id = new Guid("71bd378a-854f-41a0-b565-2021bdaf1bfb"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 204, DateTimeKind.Local).AddTicks(8600),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 204, DateTimeKind.Local).AddTicks(8600),
                            Name = "Porsche"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef7b23b3-39a0-448a-83ed-45eb6a1224da"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(4041),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(4042),
                            Name = "Adana"
                        },
                        new
                        {
                            Id = new Guid("01bbde4d-9a2e-4f90-b05d-0a8f95126caa"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(4044),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(4045),
                            Name = "Adıyaman"
                        },
                        new
                        {
                            Id = new Guid("7679f24a-7d29-472c-b674-6431a9ab05f1"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(4047),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(4047),
                            Name = "Afyon"
                        },
                        new
                        {
                            Id = new Guid("3d8f80b5-0053-4f9f-9567-d04932548e6e"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(4048),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(4049),
                            Name = "Ağrı"
                        },
                        new
                        {
                            Id = new Guid("4716b89d-3237-4dcf-9901-0318a803ff81"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(4050),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(4050),
                            Name = "Amasya"
                        },
                        new
                        {
                            Id = new Guid("cbe7752a-8eaf-4743-a487-4c6e62fb5658"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(4052),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(4052),
                            Name = "Ankara"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Finder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ConfirmEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("ConfirmPerson")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("VARBINARY(500)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("VARBINARY(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SuccessfulWork")
                        .HasColumnType("int");

                    b.Property<string>("Tc")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("VIP")
                        .HasColumnType("bit");

                    b.Property<decimal>("Vote")
                        .HasColumnType("Decimal(3,1)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Tc")
                        .IsUnique();

                    b.ToTable("Finders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2394f0d0-07d9-43b5-9095-30c4975f449d"),
                            CityId = new Guid("cbe7752a-8eaf-4743-a487-4c6e62fb5658"),
                            ConfirmEmail = true,
                            ConfirmPerson = true,
                            CreatedByName = "Samet",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(2914),
                            Description = "Merhaba bana güvenebilrirsnizi...",
                            Email = "kabadayiabdulsamet@gmail.com",
                            FirstName = "samet",
                            IsActive = true,
                            IsBanned = false,
                            LastName = "Kabadayı",
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(2906),
                            PasswordHash = new byte[] { 56, 50, 55, 99, 99, 98, 48, 101, 101, 97, 56, 97, 55, 48, 54, 99, 52, 99, 51, 52, 97, 49, 54, 56, 57, 49, 102, 56, 52, 101, 55, 98 },
                            PasswordSalt = new byte[] { 51, 97, 53, 102, 99, 56, 49, 99, 97, 56, 102, 53, 57, 57, 55, 49, 51, 50, 101, 56, 101, 101, 99, 99, 100, 56, 54, 55, 50, 99, 99, 98 },
                            Phone = "5555555555",
                            RememberMe = false,
                            RoleId = new Guid("316dfa77-073d-4672-bbf6-5d615575696c"),
                            SuccessfulWork = 12,
                            Tc = "44444444444",
                            VIP = true,
                            Vote = 9m
                        },
                        new
                        {
                            Id = new Guid("d22c2e26-fc10-4fdc-8a2e-ddcdbdbfba7f"),
                            CityId = new Guid("ef7b23b3-39a0-448a-83ed-45eb6a1224da"),
                            ConfirmEmail = false,
                            ConfirmPerson = false,
                            CreatedByName = "Samet1",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(2925),
                            Description = "Merhaba bana güvenebilrirsnizi2...",
                            Email = "sabadayiabdulsamet@gmail.com",
                            FirstName = "ali",
                            IsActive = true,
                            IsBanned = false,
                            LastName = "veli",
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(2922),
                            PasswordHash = new byte[] { 56, 50, 55, 99, 99, 98, 48, 101, 101, 97, 56, 97, 55, 48, 54, 99, 52, 99, 51, 52, 97, 49, 54, 56, 57, 49, 102, 56, 52, 101, 55, 98 },
                            PasswordSalt = new byte[] { 51, 97, 53, 102, 99, 56, 49, 99, 97, 56, 102, 53, 57, 57, 55, 49, 51, 50, 101, 56, 101, 101, 99, 99, 100, 56, 54, 55, 50, 99, 99, 98 },
                            Phone = "6555555555",
                            RememberMe = false,
                            RoleId = new Guid("316dfa77-073d-4672-bbf6-5d615575696c"),
                            SuccessfulWork = 0,
                            Tc = "54444444444",
                            VIP = false,
                            Vote = 9m
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Proclamation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BrandId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ProclamaionPrize")
                        .HasColumnType("money");

                    b.Property<Guid?>("SeekerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("VehiclePrize")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CityId");

                    b.HasIndex("SeekerId");

                    b.ToTable("Proclamations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4121c85-ee78-41fd-aa7f-dabc74d1536a"),
                            BrandId = new Guid("8ecbbdb3-50ad-4b66-9baa-1f27298695a7"),
                            CityId = new Guid("cbe7752a-8eaf-4743-a487-4c6e62fb5658"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(5297),
                            Description = "araç yakın",
                            IsActive = true,
                            Link = "www.ask.com",
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(5293),
                            ProclamaionPrize = 1000m,
                            SeekerId = new Guid("5b244afb-5101-430f-84f6-f48fafc339d8"),
                            VehiclePrize = 3000000m
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b097d52-677d-4915-8be0-1680b14a5010"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(3296),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(3297),
                            Name = "Expert"
                        },
                        new
                        {
                            Id = new Guid("ab230d00-b037-4751-b727-dddc7cd9bb5d"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(3300),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(3300),
                            Name = "Fish"
                        },
                        new
                        {
                            Id = new Guid("c5d62390-65d4-44a3-a134-e1f2e63642dc"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(3302),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(3302),
                            Name = "Mid"
                        },
                        new
                        {
                            Id = new Guid("664b6c0c-2cdf-46c3-bffe-164b9c6dae86"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(3303),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(3304),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("316dfa77-073d-4672-bbf6-5d615575696c"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(3305),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(3306),
                            Name = "Mod"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Seeker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ConfirmEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("ConfirmPerson")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("VARBINARY(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("bit");

                    b.Property<string>("Tc")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("VIP")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("Tc")
                        .IsUnique();

                    b.ToTable("Seekers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b244afb-5101-430f-84f6-f48fafc339d8"),
                            CityId = new Guid("01bbde4d-9a2e-4f90-b05d-0a8f95126caa"),
                            ConfirmEmail = true,
                            ConfirmPerson = true,
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(949),
                            Email = "aliali@gmail",
                            FirstName = "ali",
                            IsActive = true,
                            IsBanned = false,
                            LastName = "mehmet",
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(932),
                            PasswordHash = new byte[] { 98, 101, 51, 97, 51, 98, 97, 100, 53, 48, 101, 55, 48, 51, 99, 99, 98, 99, 102, 97, 102, 100, 55, 52, 100, 55, 48, 97, 48, 57, 49, 50 },
                            Phone = "1111111111",
                            RememberMe = false,
                            Tc = "12345678901",
                            VIP = true
                        },
                        new
                        {
                            Id = new Guid("5eb98805-dc12-45ae-b97d-c97a81a0f0e6"),
                            CityId = new Guid("4716b89d-3237-4dcf-9901-0318a803ff81"),
                            ConfirmEmail = false,
                            ConfirmPerson = false,
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(956),
                            Email = "veliveli@gmail",
                            FirstName = "veli",
                            IsActive = true,
                            IsBanned = false,
                            LastName = "ahmet",
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(953),
                            PasswordHash = new byte[] { 102, 56, 97, 98, 57, 56, 99, 102, 52, 100, 54, 55, 100, 55, 98, 53, 101, 100, 50, 98, 48, 54, 101, 102, 102, 53, 49, 53, 97, 100, 52, 55 },
                            Phone = "2222222222",
                            RememberMe = false,
                            Tc = "22222222222",
                            VIP = false
                        });
                });

            modelBuilder.Entity("Entities.Concrete.VehicleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23cf33d2-4f95-4a36-973a-b0f6e69ce29d"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(3598),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(3599),
                            Name = "Otomobil"
                        },
                        new
                        {
                            Id = new Guid("d20902d0-022c-4918-8c53-53e267ec4885"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(3601),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(3601),
                            Name = "Deniz Aracı"
                        },
                        new
                        {
                            Id = new Guid("974dbdb9-2993-44ef-b57a-1240eb1fb597"),
                            CreatedByName = "empty",
                            CreatedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(3603),
                            IsActive = true,
                            ModifiedByName = "empty",
                            ModifiedDate = new DateTime(2022, 12, 3, 14, 18, 45, 205, DateTimeKind.Local).AddTicks(3604),
                            Name = "Motorsiklet"
                        });
                });

            modelBuilder.Entity("Entities.Concreate.BrandVehicleType", b =>
                {
                    b.HasOne("Entities.Concrete.Brand", "Brand")
                        .WithMany("VehicleTypes")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.VehicleType", "VehicleType")
                        .WithMany("Brands")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Entities.Concrete.Finder", b =>
                {
                    b.HasOne("Entities.Concrete.City", "City")
                        .WithMany("Finders")
                        .HasForeignKey("CityId");

                    b.HasOne("Entities.Concrete.Role", "Role")
                        .WithMany("Finders")
                        .HasForeignKey("RoleId");

                    b.Navigation("City");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entities.Concrete.Proclamation", b =>
                {
                    b.HasOne("Entities.Concrete.Brand", "Brand")
                        .WithMany("Proclamations")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.City", "City")
                        .WithMany("Proclamations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Seeker", "Seeker")
                        .WithMany("Proclamations")
                        .HasForeignKey("SeekerId");

                    b.Navigation("Brand");

                    b.Navigation("City");

                    b.Navigation("Seeker");
                });

            modelBuilder.Entity("Entities.Concrete.Seeker", b =>
                {
                    b.HasOne("Entities.Concrete.City", "City")
                        .WithMany("Seekers")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Entities.Concrete.Brand", b =>
                {
                    b.Navigation("Proclamations");

                    b.Navigation("VehicleTypes");
                });

            modelBuilder.Entity("Entities.Concrete.City", b =>
                {
                    b.Navigation("Finders");

                    b.Navigation("Proclamations");

                    b.Navigation("Seekers");
                });

            modelBuilder.Entity("Entities.Concrete.Role", b =>
                {
                    b.Navigation("Finders");
                });

            modelBuilder.Entity("Entities.Concrete.Seeker", b =>
                {
                    b.Navigation("Proclamations");
                });

            modelBuilder.Entity("Entities.Concrete.VehicleType", b =>
                {
                    b.Navigation("Brands");
                });
#pragma warning restore 612, 618
        }
    }
}
